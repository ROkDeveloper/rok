
#Область Механизмы_Сериализации

Функция Сериализовать(ОбъектСериализации) Экспорт
	
	ДеревоВОбъектеХДТО	=	СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	мЗаписьХМЛ			=	новый ЗаписьXML;
	мЗаписьХМЛ.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(мЗаписьХМЛ,ДеревоВОбъектеХДТО);
	возврат мЗаписьХМЛ.Закрыть();
	
	
КонецФункции

Функция Десериализовать(XML_СтруктураСериализованногоОбъекта)Экспорт
	
	ТЗ	=	Новый Структура ("Запрос_Текст,Запрос_Параметры","",новый Массив);
	Если не ПустаяСтрока(XML_СтруктураСериализованногоОбъекта) Тогда
		ЧтениеХМЛ	=	Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(XML_СтруктураСериализованногоОбъекта);
		ТЗ	=	СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ);
		ЧтениеХМЛ.Закрыть();
	КонецЕсли;
	
	возврат ТЗ;	
	
КонецФункции

Функция СерилизацияJSON(ЗначениеСериализации) Экспорт	
	
	//2. сериализуем массив клиентов в JSON 
	ЗаписьJSON 		= Новый ЗаписьJSON; 
	ЗаписьJSON.УстановитьСтроку(); 
	ЗаписатьJSON(ЗаписьJSON, ЗначениеСериализации); 
	СтрокаДляОтвета = ЗаписьJSON.Закрыть(); 
	Возврат СтрокаДляОтвета;
	
КонецФункции

Функция ДесереализацияJSON(Строка_json) Экспорт
	
	ЧтениеJSON 			= Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(Строка_json); 
	ДанныеЗагрузки		=	ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеЗагрузки;
	
КонецФункции


#КонецОбласти

#Область Основные

Функция Выполнить_СКД_ВернутьТЗ(СКД,Настройки,ТабДок = Ложь)	
	ТЗ = Неопределено; 	
	
	//--------------------------		
	СхемаКомпоновкиДанных	=	СКД;	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,?(ТабДок,Неопределено,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	Если ТабДок Тогда
		ДокументРезультат = Новый ТабличныйДокумент;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	Иначе		
		ДокументРезультат = новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДокументРезультат);
	КонецЕсли;	
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	ТЗ = ДокументРезультат;	
	//--------------------------
	
	возврат ТЗ;                 
	
КонецФункции


//Запрос 			- ссылка на справочник запросов
//Параметры 		- параметры get запроса (тип структура)
//Сообщения 		- Строка для сообщений пользователю
//СтатистикаРаботы 	- (тип сооветвие) подсчет времени выполнения модулей;	
Функция ВернутьРезультат(Параметры_Запроса) Экспорт
	
	мСКД = Неопределено;	
	ХМЛ_Данные = Неопределено;
	мНастройки = Неопределено;
	Результат =	Новый ТаблицаЗначений;
	Параметры =	Параметры_Запроса.Параметры; 
	
	ЭтоОтчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры_Запроса.Запрос,"Отчет");	
	мТипИсточника	=	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры_Запроса.Запрос,"ТипИсточника");	
	
	ХМЛ_Данные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры_Запроса.Запрос,"ХМЛ_Данные");	
	ХМЛ_Настройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры_Запроса.Запрос,"ХМЛ_Настройки");	
	ДополнитьЗапросИденитификаторами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры_Запроса.Запрос,"СсылкаКлюч");	
	
	
	//ФОРМИРОВАНИЕ НАСТРОЕК ДАННЫХ
	/////////////////////////////	
	Если не ПустаяСтрока(ХМЛ_Данные) Тогда
		Попытка
			мСКД = ВернутьСКД_ХМЛ(ХМЛ_Данные);
		Исключение
			
		КонецПопытки;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХМЛ_Настройки) Тогда		
		Попытка
			мНастройки = ВернутьСКД_ХМЛ(ХМЛ_Настройки,Истина);
		Исключение
			мНастройки =	мСКД.НастройкиПоУмолчанию; 
		КонецПопытки;		
		Если мНастройки=Неопределено Тогда
			мНастройки =	мСКД.НастройкиПоУмолчанию; 		
		КонецЕсли;
		
	КонецЕсли;	
	
	////////////////////////////////////////////
	//окно отладки
	
	
	
	//ФОРМИРОВАНИЕ ТАБЛИЦЫ ДАННЫХ
	/////////////////////////////
	Параметры_Запроса.СтатистикаРаботы.Вставить("2)Получение данных БД",ТекущаяДата());	
	Если ЭтоОтчет=Ложь Тогда //Формирование данных по произвольному алгоритму	
		МодульАлгоритма =	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры_Запроса.Запрос,"ПроизволныйКод");	 
		Попытка
			Выполнить(МодульАлгоритма);
		Исключение
			Параметры_Запроса.Сообщения = Параметры_Запроса.Сообщения+"<err-exec> описание ошибки выполнения("+ОписаниеОшибки()+")"+Символы.ПС;			
		КонецПопытки;				
		
	Иначе //Формирование данных по СКД			
		
		Если мСКД<>Неопределено Тогда
			Результат = Выполнить_СКД_ВернутьТЗ(мСКД,мНастройки);
		КонецЕсли;
		
	КонецЕсли;  	
	
	
	
	
	мКлюч	=	"2)Получение данных БД";
	Параметры_Запроса.СтатистикаРаботы[мКлюч] = ТекущаяДатаСеанса()-Параметры_Запроса.СтатистикаРаботы[мКлюч];
	
	//ДОРАБОТКА ТАБЛИЦЫ ДАННЫХ КЛЮЧАМИ
	/////////////////////////////	
	Если ДополнитьЗапросИденитификаторами Тогда
		мКлюч	=	"3)Дополнение ключами";
		Параметры_Запроса.СтатистикаРаботы.Вставить(мКлюч,ТекущаяДата());	
		ДополнитьТЗ_Ключами(Результат);
		Параметры_Запроса.СтатистикаРаботы[мКлюч] = ТекущаяДатаСеанса()-Параметры_Запроса.СтатистикаРаботы[мКлюч];
	КонецЕсли;  
	
	//БЕЗОПАСНОСТЬ
	/////////////////////////////		
	Ограничение	=	ЭтоДемо_lega_04_02_2021();
	
	Если Ограничение>0 Тогда
		НТЗ = Результат.СкопироватьКолонки();
		КоллекцияКолонок = НТЗ.Колонки;
		итератор = 0;
		
		Для Каждого ТекСтрока из Результат Цикл
			итератор = итератор+1;
			ЗаполнитьЗначенияСвойств(НТЗ.добавить(),ТекСтрока);
			
			Если итератор = Ограничение Тогда
				
				НС = НТЗ.добавить();
				НС[0] = "ограничение версии...";
				
				Для каждого ТекКолонки из КоллекцияКолонок Цикл 
					НС[ТекКолонки.имя] = "ограничение версии..."+Ограничение+" строк"; 			
				КонецЦикла;
				
				Прервать;
			КонецЕсли;			
		КонецЦикла;		
		
		Результат = НТЗ; 		
		
	КонецЕсли;	
	
	//ОФОРМЛЕНИЕ РЕЗУЛЬТАТА
	/////////////////////////////			
	мКлюч = "4)Оформление результата";
	Параметры_Запроса.СтатистикаРаботы.Вставить(мКлюч,ТекущаяДата());	
	Результат = AQ_Модуль.Обработка_ТЗ_в_Паралелли(Результат,Параметры_Запроса);
	Параметры_Запроса.СтатистикаРаботы[мКлюч] = ТекущаяДатаСеанса()-Параметры_Запроса.СтатистикаРаботы[мКлюч];
	
	
	Если  мТипИсточника	=	"json" Тогда		
		мКлюч = "5)Сериализация "+мТипИсточника;
		Параметры_Запроса.СтатистикаРаботы.Вставить(мКлюч,ТекущаяДата());					
		Результат = AQ_Модуль.СерилизацияJSON(Результат);									
		Параметры_Запроса.СтатистикаРаботы[мКлюч] = ТекущаяДатаСеанса()-Параметры_Запроса.СтатистикаРаботы[мКлюч];
	ИначеЕсли мТипИсточника	=	"xml" Тогда						
		мКлюч = "5)Сериализация "+мТипИсточника;
		Параметры_Запроса.СтатистикаРаботы.Вставить(мКлюч,ТекущаяДата());							
		Результат = AQ_Модуль.Сериализовать(Результат);															
		Параметры_Запроса.СтатистикаРаботы[мКлюч] = ТекущаяДатаСеанса()-Параметры_Запроса.СтатистикаРаботы[мКлюч];
	КонецЕсли;			
	
	Возврат Результат;
	
	
КонецФункции


//Запрос 			- ссылка на справочник запросов
//Параметры 		- параметры get запроса (тип структура)
//Сообщения 		- Строка для сообщений пользователю
//СтатистикаРаботы 	- (тип сооветвие) подсчет времени выполнения модулей;	
Функция ВернутьРезультат_(спр_pbi_запросы,Знач Параметры,ТабДок=Истина,СообщениеМодуля="") Экспорт
	
	мСКД = Неопределено;	
	ХМЛ_Данные = Неопределено;
	мНастройки = Неопределено;
	Результат	=	Новый ТаблицаЗначений;
	
	ЭтоОтчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(спр_pbi_запросы,"Отчет");	
	
	ХМЛ_Данные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(спр_pbi_запросы,"ХМЛ_Данные");	
	ХМЛ_Настройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(спр_pbi_запросы,"ХМЛ_Настройки");	
	ДополнитьЗапросИденитификаторами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(спр_pbi_запросы,"СсылкаКлюч");	
	
	//ФОРМИРОВАНИЕ ТАБЛИЦЫ ДАННЫХ
	/////////////////////////////
	
	Если ЭтоОтчет=Ложь Тогда //Формирование данных по произвольному алгоритму	
		МодульАлгоритма =	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(спр_pbi_запросы,"ПроизволныйКод");	 
		Попытка
			Выполнить(МодульАлгоритма);
		Исключение
			СообщениеМодуля = СообщениеМодуля+"<err-exec> описание ошибки выполнения("+ОписаниеОшибки()+")"+Символы.ПС;			
		КонецПопытки;				
		
	Иначе //Формирование данных по СКД	
		Если не ПустаяСтрока(ХМЛ_Данные) Тогда
			Попытка
				мСКД = ВернутьСКД_ХМЛ(ХМЛ_Данные);
			Исключение
				
			КонецПопытки;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ХМЛ_Настройки) Тогда		
			Попытка
				мНастройки = ВернутьСКД_ХМЛ(ХМЛ_Настройки,Истина);
			Исключение
				мНастройки =	мСКД.НастройкиПоУмолчанию; 
			КонецПопытки;		
		КонецЕсли;	
		
		Если мНастройки=Неопределено Тогда
			мНастройки =	мСКД.НастройкиПоУмолчанию; 		
		КонецЕсли;		
		
		Если мСКД<>Неопределено Тогда
			Результат = Выполнить_СКД_ВернутьТЗ(мСКД,мНастройки);
		КонецЕсли;
		
	КонецЕсли;  	
	
	//ДОРАБОТКА ТАБЛИЦЫ ДАННЫХ КЛЮЧАМИ
	/////////////////////////////	
	Если ДополнитьЗапросИденитификаторами Тогда
		ДополнитьТЗ_Ключами(Результат);
	КонецЕсли;  
	
	//БЕЗОПАСНОСТЬ
	/////////////////////////////		
	Ограничение	=	ЭтоДемо_lega_04_02_2021();
	
	Если Ограничение>0 Тогда
		НТЗ = Результат.СкопироватьКолонки();
		КоллекцияКолонок = НТЗ.Колонки;
		итератор = 0;
		
		Для Каждого ТекСтрока из Результат Цикл
			итератор = итератор+1;
			ЗаполнитьЗначенияСвойств(НТЗ.добавить(),ТекСтрока);
			
			Если итератор = Ограничение Тогда
				
				НС = НТЗ.добавить();
				НС[0] = "ограничение версии...";
				
				Для каждого ТекКолонки из КоллекцияКолонок Цикл 
					НС[ТекКолонки.имя] = "ограничение версии..."+Ограничение+" строк"; 			
				КонецЦикла;
				
				Прервать;
			КонецЕсли;			
		КонецЦикла;		
		
		Результат = НТЗ; 		
		
	КонецЕсли;	
	
	//СОЗДАНИЕ ТАБ.ДОК ИЗ ТАБЛИЦЫ
	/////////////////////////////		
	Если ТабДок = Истина Тогда
		мНачало	=	ТекущаяДата();
		//Результат = Вернуть_ТабДок_ТЗ(Результат);
		Результат	=	AQ_Модуль.Обработка_ТЗ_в_Паралелли(Результат,спр_pbi_запросы);
		Сообщить("время формирования:"+(ТекущаяДата()-мНачало));
	КонецЕсли;	
	
	Возврат Результат;
	
	
КонецФункции

////Транспонирование в обычный текст
Функция ТЗ_Текст(ТабЗначений,мТекстРазделитель=";",ДобавитьИменаКолонок = Истина) Экспорт
	
	КоллекцияКолонок	=	ТабЗначений.Колонки;	
	
	мТекстРезультат	=	"";	
	
	Если ДобавитьИменаКолонок Тогда
		Для каждого ТекКолонки из КоллекцияКолонок Цикл 
			мТекстРезультат	=	мТекстРезультат+?(ПустаяСтрока(мТекстРезультат),"",мТекстРазделитель)+ТекКолонки.Имя;								
		КонецЦикла;
	КонецЕсли;	
	
	Для каждого ТекСтрока из ТабЗначений Цикл 			
		
		ПерваяСтрока = Истина;
		мТекСтрока	=	"";		
		ТекРазделитель = "";
		Для каждого ТекКолонки из КоллекцияКолонок Цикл 			
			мТекСтрока	=	мТекСтрока+?(ПерваяСтрока,"",мТекстРазделитель)+текСтрока[ТекКолонки.Имя];	
			
			Если ПерваяСтрока Тогда
				ПерваяСтрока = Ложь;
				ТекРазделитель = мТекстРазделитель;
			КонецЕсли;			
			
		КонецЦикла;	
		мТекстРезультат	=	мТекстРезультат+Символы.ПС+мТекСтрока;
		
	КонецЦикла;
	
	Возврат мТекстРезультат;	
	
КонецФункции

Функция ТЗ_В_Структуру(ТабЗначений)Экспорт 
	
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТабЗначений);
	
	КоллекцияКолонок = ТабЗначений.колонки;	
	
	Для каждого ТекЭлемента из Результат Цикл		
		Для каждого ТекКолонки из КоллекцияКолонок Цикл
			мЗначение	=	ТекЭлемента[ТекКолонки.имя];
			Если ТипЗнч(мЗначение)	=	Тип("Строка") или
				ТипЗнч(мЗначение)	=	Тип("Дата") или 
				ТипЗнч(мЗначение)	=	Тип("Число") или 
				ТипЗнч(мЗначение)	=	Тип("Булево") Тогда
				Продолжить;
			КонецЕсли;
			ТекЭлемента[ТекКолонки.имя]	=	""+мЗначение;			
		КонецЦикла;			
	КонецЦикла;	
	
	возврат Результат;
	
КонецФункции

Функция ТЗ_html(РезультатЗапроса) Экспорт
	
	КоллекцияКолонок = РезультатЗапроса.колонки;
	
	////Транспонирование в хтмл текст
	мТекстРезультат	=	"<tr>";
	Для каждого ТекКолонки из КоллекцияКолонок Цикл 
		мТекстРезультат	=	мТекстРезультат+"<td>"+ТекКолонки.Имя+"</td>";								
	КонецЦикла;
	мТекстРезультат	=	мТекстРезультат+"</tr>";
	
	Для каждого ТекСтрока из РезультатЗапроса Цикл 	
		
		мТекСтрока	=	Символы.ПС;
		Для каждого ТекКолонки из КоллекцияКолонок Цикл 
			мТекСтрока	=	мТекСтрока+"<td>"+текСтрока[ТекКолонки.Имя]+"</td>";					
		КонецЦикла;	
		
		мТекстРезультат	=	мТекстРезультат+"<tr>"+мТекСтрока+"</tr>";
		
	КонецЦикла;			
	
	Результат	=	"<html><body><table align=""""center"""" width=""""100%"""" border=""""1"""" >"+мТекстРезультат+"</table></body></html>";
	
	возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Дополнительные

Функция ЭтоДемо_lega_04_02_2021()
	
	Возврат 0;
	
КонецФункции

Функция ВернутьСхемуХМЛ_СКД(мСКД) Экспорт	
	
	Фабрика = Новый СериализаторXDTO(ФабрикаXDTO);  
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	ПотокВПамяти = Новый ПотокВПамяти();
	НоваяЗаписьXML.ОткрытьПоток(ПотокВПамяти, "UTF-8");
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, мСКД, , , , НазначениеТипаXML.Явное);
	НоваяЗаписьXML.Закрыть();
	
	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
	ЧтениеДанных = Новый ЧтениеДанных(ПотокВПамяти, "UTF-8");
	мХмл = ЧтениеДанных.ПрочитатьСимволы();
	ПотокВПамяти.Закрыть();
	
	
	////---------------
	//имяВременногФайла = ПолучитьИмяВременногоФайла("tmp");
	//
	//ХДТО = Новый СериализаторXDTO(ФабрикаXDTO);  
	//НоваяЗапись = НОвый ЗаписьXML;    
	//НоваяЗапись.ОткрытьФайл(имяВременногФайла);     
	//ХДТО.ЗаписатьXML(НоваяЗапись, мСКД, НазначениеТипаXML.Явное );
	//НоваяЗапись.Закрыть();
	//
	//мТекст	=	новый ТекстовыйДокумент;
	//мТекст.Прочитать(имяВременногФайла);
	//мХмл = мТекст.ПолучитьТекст();	
	
	Возврат мХмл;
	
КонецФункции

Функция ВернутьСКД_ХМЛ(хмл_Строка,Настройки=Ложь)
	// Чтение СКД из XML-файла.
	ЧтениеXML = Новый ЧтениеXML;	
	ЧтениеXML.УстановитьСтроку(хмл_Строка);
	ТипСхемы = ?(Настройки,Тип("НастройкиКомпоновкиДанных"),Тип("СхемаКомпоновкиДанных"));
	СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипСхемы);
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция Транслит(знач Вход) Экспорт
	
	Вход = СтрЗаменить(Вход," ","_");
	
	Коды = Новый Соответствие;
	Коды.Вставить("ё","yo");
	Коды.Вставить("Ё","Yo");
	Нач = КодСимвола("А");
	Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
	Для К = Нач по КодСимвола("я") Цикл
		Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
	КонецЦикла;
	Выход = "";
	Для К=1 по СтрДлина(Вход) Цикл
		Бкв = Сред(Вход,К,1);
		Зн = Коды.Получить(Бкв);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Бкв) Тогда
			Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);		
		Иначе
			Выход = Выход + ?(Зн = Неопределено, "_", Зн);	
		КонецЕсли;		
	КонецЦикла;
	
	Выход = СтрЗаменить(Выход,"__","_");
	Выход = СтрЗаменить(Выход,"__","_");
	
	Возврат Выход;
КонецФункции

Процедура ДополнитьТЗ_Ключами(ТЗ)
	
	КоллекцияКолонок = ТЗ.Колонки;
	КешКолонокГуид = новый Соответствие;
	КешЗначенийСсылок = Новый Соответствие;
	
	Для каждого ТекКолонки из КоллекцияКолонок Цикл
		Для каждого ТекСтрока из ТЗ Цикл				
			
			мЗначение = ТекСтрока[ТекКолонки.Имя];
			Если не ЗначениеЗаполнено(мЗначение) Тогда
				Продолжить;
			КонецЕсли;		
			мЗначениеКлюча = КешЗначенийСсылок.Получить(мЗначение);
			Если  мЗначениеКлюча = Неопределено Тогда
				
				Попытка
					мЗначениеКлюча = ""+мЗначение.УникальныйИдентификатор();	
				Исключение
					Продолжить;		
				КонецПопытки;							
				КешЗначенийСсылок.Вставить(мЗначение,мЗначениеКлюча);				
				
			КонецЕсли;
			
			КолонкаГУИД = КешКолонокГуид.Получить(ТекКолонки.Имя);
			Если КолонкаГУИД=Неопределено Тогда			
				КолонкаГУИД = ТекКолонки.Имя+"_guid";
				ТЗ.колонки.Добавить(КолонкаГУИД);
				КешКолонокГуид.Вставить(ТекКолонки.Имя,КолонкаГУИД);
			КонецЕсли;
			ТекСтрока[КолонкаГУИД] = мЗначениеКлюча; 
			
		КонецЦикла;
	КонецЦикла;
	
	
	
	
КонецПроцедуры

Функция Вернуть_ТабДок_ТЗ(Результат) 
	
	ТабДокумент = Новый ТабличныйДокумент;
	Если Результат.Количество()>0 Тогда
		Построитель = Новый ПостроительОтчета;
		Построитель.ИсточникДанных=Новый ОписаниеИсточникаДанных(Результат);       
		Построитель.Вывести(ТабДокумент);
		
		Для каждого Текколонки из Результат.Колонки Цикл
			ПодправитьМакет(ТабДокумент,Текколонки.Имя,Текколонки.Имя,20);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура ПодправитьМакет(МакетОформления,СтароеИмя,НовоеИмя,ШиринаКолонки)
	
	ТекОбласть = МакетОформления.Области.ШапкаТаблицы; 
	НайденаяЯчейка	=	МакетОформления.найтитекст(СтароеИмя,,ТекОбласть,,Истина);		
	Если НайденаяЯчейка	=	Неопределено Тогда
		Возврат;
	конецЕсли;    		
	
	Если НайденаяЯчейка.Параметр=Неопределено Тогда
		НайденаяЯчейка.Текст			=	НовоеИмя;
		НайденаяЯчейка.ШиринаКолонки	=	ШиринаКолонки;
		НайденаяЯчейка.РазмещениеТекста	=	ТипРазмещенияТекстаТабличногоДокумента.Переносить;				
	иначе  		
		НайденаяЯчейка.Формат			=	"ЧЦ=15; ЧДЦ=3; ЧРГ=";			
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ПАРАЛЕЛЛНЫЕ_АЛГОРИТМЫ

Функция Обработка_ТЗ_в_Паралелли(ТЗ,ПараметрыЗапроса) Экспорт
	
	мРезультат = Неопределено; 
	МассивЗаданий =	Новый Соответствие;
	
	СсылкаНаЗапрос = ПараметрыЗапроса.Запрос; 
	мРазделитель =	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЗапрос,"Разделитель");
	
	ЗаписейПотоков = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЗапрос,"ЗаписейПотоков");
	Количество_Пар = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЗапрос,"Количество_Пар");
	КоличествоСтрок = ТЗ.Количество();
	ЗаданийВПотоке = КоличествоСтрок;
	
	мТипИсточника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЗапрос,"ТипИсточника");	
	мТипИсточника =	?(ПустаяСтрока(мТипИсточника),"txt",мТипИсточника);
	
	мНачало	= ТекущаяДата();
	
	Если мТипИсточника = "txt" 
		или мТипИсточника = "json" Тогда
		
	Иначе		
		Количество_Пар = 0;
	КонецЕсли;	
	
	Если Количество_Пар = 0 Тогда
		Если мТипИсточника = "txt" Тогда
			мРезультат =	AQ_Модуль.ТЗ_Текст(ТЗ, мРазделитель);		
		ИначеЕсли мТипИсточника	= "html" Тогда
			мРезультат =	AQ_Модуль.ТЗ_html(ТЗ);																
		ИначеЕсли мТипИсточника	= "json" Тогда
			мРезультат =	AQ_Модуль.ТЗ_В_Структуру(ТЗ);													
		ИначеЕсли мТипИсточника	= "xml" Тогда
			мРезультат =	ТЗ;																
		КонецЕсли;
	Иначе 		
		
		//Выбор алгоритма паралельности расчет параметров
		Если ЗаписейПотоков Тогда
			ЗаданийВПотоке = Количество_Пар;		
		Иначе					
			ЗаданийВПотоке = Окр(КоличествоСтрок/Количество_Пар);		
		КонецЕсли;		
		
		Счетчик = 0;
		мТЗ	= ТЗ.СкопироватьКолонки();	
		
		ИменаКолонокНужны = Истина;
		
		Для каждого ТекСтрока из ТЗ Цикл
			Счетчик = Счетчик + 1;		
			ЗаполнитьЗначенияСвойств(мТЗ.Добавить(),ТекСтрока);		
			Если счетчик%ЗаданийВПотоке=0 Тогда
				ПараметрыВыполненияФункции = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);	
				
				Если мТипИсточника = "txt" Тогда
					мЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияФункции,"AQ_Модуль.ТЗ_Текст",мТЗ,мРазделитель,ИменаКолонокНужны);								
					ИменаКолонокНужны = Ложь;
				ИначеЕсли мТипИсточника = "json" Тогда
					мЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияФункции,"AQ_Модуль.ТЗ_В_Структуру",мТЗ);								
				КонецЕсли;
								
				МассивЗаданий.Вставить(МассивЗаданий.Количество()+1,мЗадание);
				мТЗ	=	ТЗ.СкопироватьКолонки();					
			КонецЕсли;				
		КонецЦикла;
		
		Если мТЗ.Количество()>0 Тогда
			ПараметрыВыполненияФункции = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);	
				Если мТипИсточника = "txt" Тогда
					мЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияФункции,"AQ_Модуль.ТЗ_Текст",мТЗ,мРазделитель);								
				ИначеЕсли мТипИсточника = "json" Тогда
					мЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияФункции,"AQ_Модуль.ТЗ_В_Структуру",мТЗ);								
				КонецЕсли;

			МассивЗаданий.Вставить(МассивЗаданий.Количество()+1,мЗадание);
		КонецЕсли;
		
		//ПодключитьОбработчикОжидания(
		//Ожидание пока все выполниться		
		ЗаданияЗавершены = Ложь;
		Пока не ЗаданияЗавершены и МассивЗаданий.Количество()>0 Цикл				
			Для Каждого ТекЭлемента из МассивЗаданий Цикл
				ТекЗадание	=	ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекЭлемента.Значение.ИдентификаторЗадания);			
				Если ТекЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда			
					ЗаданияЗавершены = Ложь;
					Прервать;
				Иначе
					ЗаданияЗавершены = Истина;
				КонецЕсли;			
			КонецЦикла;		
		КонецЦикла;
		
		
		//сборка результата		
		для ии=1 по МассивЗаданий.Количество() Цикл 
			ТекЗадания = МассивЗаданий.Получить(ии);
			Если мТипИсточника = "txt" Тогда
				Если мРезультат	=	Неопределено Тогда
					мРезультат = "";
				КонецЕсли;				
				мРезультат = мРезультат+ПолучитьИзВременногоХранилища(ТекЗадания.АдресРезультата);		
				
			ИначеЕсли мТипИсточника = "json" Тогда
				Если мРезультат	=	Неопределено Тогда
					мРезультат = новый Массив;
				КонецЕсли;
				
				ЧастьРезультата = ПолучитьИзВременногоХранилища(ТекЗадания.АдресРезультата);
				
				Для каждого ТекЭлемента из ЧастьРезультата Цикл
					мРезультат.Добавить(ТекЭлемента);
				КонецЦикла;				
				
			КонецЕсли; 			 			
		КонецЦикла;			
		
	КонецЕсли;
	
	//БЛОК СТАТИСТИКИ
	мКлюч	=	"Потоки";
	СтрокаПредставленияПотоков = СтрШаблон("Таблица из %1 строк, обрабатывалась в %2 потоках по %3 строк",
		КоличествоСтрок,МассивЗаданий.Количество(),ЗаданийВПотоке);
	ПараметрыЗапроса.СтатистикаРаботы.Вставить(мКлюч,СтрокаПредставленияПотоков);		
	
	Возврат мРезультат;	
	
КонецФункции




#КонецОбласти



